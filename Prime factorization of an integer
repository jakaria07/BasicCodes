#include<bits/stdc++.h>
using namespace std;

const ll sz = 1e8+5;

vector<ll> prime;
vector<ll> factors;
bitset<SIZE> sieve;

void primeSieve()
{
    sieve[0] = sieve[1] = 1;
    prime.push_back(2);
    for(ll i = 4; i <= sz; i += 2)
    {
        sieve[i] = 1;
    }
    for(ll i = 3; i <= sz; i += 2)
    {
        if(sieve[i] == 0)
        {
            for(ll j = i*i; j <= sz; j += (1ll*2*i))
            {
                sieve[j] = 1;
            }
        }
    }
    for(ll i = 3; i <= sz; i += (2*1ll))
    {
        if(sieve[i] == 0)
        {
            prime.push_back(i);
        }
    }
}

void factorize(ll n)
{
    ll sq = sqrt(n);
    for(ll i = 0; i < prime.size() && prime[i] <= sq; i++)
    {
        if(n%prime[i] == 0)
        {
            while(n%prime[i] == 0)
            {
                n /= prime[i];
                factors.push_back(prime[i]);
            }
            sq = sqrt(n);
        }
    }
    if(n != 1)
    {
        factors.push_back(n);
    }
}

void getPrimes(int n)
{
    for(int i = 0; i < prime.size(); i++)
    {
        cout << prime[i] << " ";
    }
    cout << endl;
    for(int i = 0; i < factors.size(); i++)
    {
        cout << factors[i] << " ";
    }
    cout << endl;
}

int main()
{
    int n;
    cin >> n;
    primeSieve();
    factorize(n);
    getPrimes(n);
    return 0;
}
